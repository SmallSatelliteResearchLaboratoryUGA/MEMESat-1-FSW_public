// ======================================================================
// \title  StateMachineTesterHelpers.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for StateMachine component test harness helper functions
// ======================================================================

#include "StateMachineTester.hpp"

namespace StateMachineModule {

// ----------------------------------------------------------------------
// Helper functions
// ----------------------------------------------------------------------

void StateMachineTester ::connectPorts() {
  // Connect special input ports

  this->connect_to_cmdIn(0, this->component.get_cmdIn_InputPort(0));

  // Connect special output ports

  this->component.set_cmdRegOut_OutputPort(0, this->get_from_cmdRegOut(0));

  this->component.set_cmdResponseOut_OutputPort(
      0, this->get_from_cmdResponseOut(0));

  this->component.set_eventOut_OutputPort(0, this->get_from_eventOut(0));

  this->component.set_textEventOut_OutputPort(0,
                                              this->get_from_textEventOut(0));

  this->component.set_timeGetOut_OutputPort(0, this->get_from_timeGetOut(0));

  this->component.set_tlmOut_OutputPort(0, this->get_from_tlmOut(0));

  // Connect typed input ports

  this->connect_to_Run(0, this->component.get_Run_InputPort(0));

  this->connect_to_SM_ChangeState(
      0, this->component.get_SM_ChangeState_InputPort(0));

  this->connect_to_SM_EpsCommandIn(
      0, this->component.get_SM_EpsCommandIn_InputPort(0));

  // Connect typed output ports

  this->component.set_SM_EpsCommand_OutputPort(0,
                                               this->get_from_SM_EpsCommand(0));

  this->component.set_SM_RadioCommand_OutputPort(
      0, this->get_from_SM_RadioCommand(0));

  for (FwIndexType i = 0; i < 2; i++) {
    this->component.set_SM_ReadyForPowerOff_OutputPort(
        i, this->get_from_SM_ReadyForPowerOff(i));
  }
}

void StateMachineTester ::initComponents() {
  this->init();
  this->component.init(StateMachineTester::TEST_INSTANCE_QUEUE_DEPTH,
                       StateMachineTester::TEST_INSTANCE_ID);
}

} // namespace StateMachineModule
